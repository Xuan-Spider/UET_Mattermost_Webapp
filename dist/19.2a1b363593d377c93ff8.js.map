{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./components/do_verify_email/do_verify_email.jsx","webpack:///./components/do_verify_email/index.js","webpack:///./images/logo.png"],"names":["BackButton","React","PureComponent","render","props","onClick","url","title","PropTypes","string","func","DoVerifyEmail","constructor","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","data","handleSuccess","error","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","browserHistory","push","encodeURIComponent","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","trackEvent","getMe","then","err","FAILED_USER_STATE_GET","logoImage","siteName","object","isRequired","shape","user","email_verified","bool","defaultProps","mapStateToProps","config","getConfig","SiteName","Boolean","getCurrentUserId","getCurrentUser","mapDispatchToProps","dispatch","bindActionCreators","connect"],"mappings":"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","file":"19.2a1b363593d377c93ff8.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport default class DoVerifyEmail extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with validation parameters given in link\n         */\n        location: PropTypes.object.isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to verify the user's email\n             */\n            verifyUserEmail: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to update the user in the redux store\n             */\n            getMe: PropTypes.func.isRequired,\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Object reprenseting the current user\n         */\n        user: PropTypes.shape({\n            email_verified: PropTypes.bool,\n        }),\n\n        isLoggedIn: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email')));\n        }\n    }\n\n    handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            }, true);\n            trackEvent('settings', 'verify_email');\n            this.props.actions.getMe().then(({data, error: err}) => {\n                if (data) {\n                    this.handleRedirect();\n                } else if (err) {\n                    this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n                }\n            });\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type) {\n        let serverError = '';\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token'));\n\n        if (verify && verify.data) {\n            this.handleSuccess();\n        } else if (verify && verify.error) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDoVerifyEmail.defaultProps = {\n    location: {},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport DoVerifyEmail from './do_verify_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n","module.exports = __webpack_public_path__ + \"files/77de51bb9d8c3e0ae1c9fba08495fcc7.png\";"],"sourceRoot":""}
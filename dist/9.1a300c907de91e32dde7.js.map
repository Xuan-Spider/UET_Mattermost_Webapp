{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/color_input.tsx","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/security/mfa_section/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/user_settings.jsx"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","AccessHistoryModal","React","PureComponent","constructor","props","actions","getUserAudits","setState","show","state","componentDidMount","onShow","render","content","userAudits","length","onHide","mapStateToProps","getCurrentUserAudits","mapDispatchToProps","bindActionCreators","connect","ActivityLogModal","altId","e","preventDefault","modalContent","$","target","closest","addClass","setTimeout","removeClass","revokeSession","then","getSessions","sessions","loading","activityList","reduce","array","currentSession","index","type","push","id","locale","submitRevoke","PropTypes","string","isRequired","oneOfType","object","func","shape","ActivityLog","moreInfo","session","device_id","includes","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","localizeMessage","t","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","Date","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","os","indexOf","browser","date","getMonthLong","time","handleMoreInfo","number","MoreInfo","firstAccessTime","create_at","propTypes","bool","getUserSessions","getCurrentLocale","ColorInput","colorPicker","current","contains","isOpened","newColorData","hex","onChange","handleChange","createRef","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","color","togglePicker","backgroundColor","TimezoneSuggestion","Suggestion","item","isSelection","timezone","className","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","makeMapStateToProps","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","enablePreviewFeatures","EnablePreviewFeatures","enableUserDeactivation","EnableUserDeactivation","advancedSettingsCategory","Preferences","CATEGORY_ADVANCED_SETTINGS","sendOnCtrlEnter","get","codeBlockOnCtrlEnter","formatting","joinLeave","currentUser","getCurrentUser","savePreferences","updateUserActive","revokeAllSessionsForUser","AdvancedSettingsDisplay","getPreference","ADVANCED_FILTER_JOIN_LEAVE","JoinLeaveSection","value","currentTarget","joinLeaveState","section","onUpdateSection","joinLeavePreference","category","user_id","name","activeSection","AdvancedSections","JOIN_LEAVE","handleOnChange","handleSubmit","isSaving","serverError","handleUpdateSection","renderOnOffLabel","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","advancedSettings","settings","send_on_ctrl_enter","code_block_ctrl_enter","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","key","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","showDeactivateAccountModal","preReleaseFeatures","setting","checked","String","forEach","lastIndexOf","features","preferences","userId","Array","isArray","error","message","data","emitUserLoggedOutEvent","getStateFromProps","updateSection","description","default","defaultMessage","mac","title","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","inputs","formattingSection","renderFormattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","toggleFeature","saveEnabledFeatures","count","deactivateAccountSection","makeConfirmationModal","auth_service","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","handleDeactivateAccountSubmit","handleHideDeactivateAccountModal","closeModal","collapseModal","timezones","getTimezones","userTimezone","getUserTimezone","automaticTimezoneNotSet","useAutomaticTimezone","automaticTimezone","shouldAutoUpdateTimezone","allowCustomThemes","AllowCustomThemes","enableLinkPreviews","EnableLinkPreviews","defaultClientLocale","DefaultClientLocale","enableThemeSelection","EnableThemeSelection","enableTimezone","ExperimentalTimezone","lockTeammateNameDisplay","LockTeammateNameDisplay","configTeammateNameDisplay","TeammateNameDisplay","currentUserTimezone","getUserCurrentTimezone","militaryTime","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","USE_MILITARY_TIME_DEFAULT","teammateNameDisplay","NAME_NAME_FORMAT","channelDisplayMode","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","messageDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","collapseDisplay","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","linkPreviewDisplay","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","autoUpdateTimezone","UserSettingsDisplay","updateMe","ManageLanguages","ManageLanguage","Component","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","stopPropagation","ENTER","add","selectedOption","user","submitUser","err","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","componentWillUnmount","options","languages","map","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","body","setLanguage","handleKeyDown","handleMenuClose","handleMenuOpen","changeLanguage","ManageTimezones","manualTimezoneInput","selected","manualTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","toString","updatedUser","getBrowserTimezone","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","setSwitchBoxRef","handleTimezoneSelected","SuggestionList","changeTimezone","getDisplayStateFromProps","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","updateState","newState","prevSections","theme","clock","linkpreview","message_display","channel_display_mode","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","display","createSection","firstOption","secondOption","thirdOption","disabled","extraInfo","submit","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","describe","collapseSection","defaultDisplay","linkPreviewSection","clockSection","teammateNameDisplaySection","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","setRequireConfirm","setEnforceFocus","ColorChooser","newColor","messages","defineMessages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","stringify","textarea","refs","focus","setSelectionRange","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","on","onCodeThemeChange","off","assign","image","node","UserAgent","slideToggle","formatMessage","context","intl","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","group","handleColorChange","pasteBox","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","intlShape","getThemeCategory","currentTeamId","getCurrentTeamId","getTheme","applyToAllTeams","CATEGORY_THEME","showAllTeamsCheckbox","getMyTeamsCount","saveTheme","deleteTeamSpecificThemes","UserSettingsTheme","allowedThemes","AllowedThemes","split","PremadeThemeChooser","premadeThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","replace","arrayOf","defaultProps","ThemeSetting","teamId","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","ReactDOM","findDOMNode","UNSAFE_componentWillReceiveProps","nextProps","resetFields","DEFAULT_CODE_THEME","scrollTop","updateType","displayCustom","custom","premade","themeUI","handleImportModal","allTeamsCheckbox","submitTheme","focused","requireEmailVerification","RequireEmailVerification","maxFileSize","parseInt","MaxFileSize","ldapFirstNameAttributeSet","LdapFirstNameAttributeSet","ldapLastNameAttributeSet","LdapLastNameAttributeSet","samlFirstNameAttributeSet","SamlFirstNameAttributeSet","samlLastNameAttributeSet","SamlLastNameAttributeSet","ldapNicknameAttributeSet","LdapNicknameAttributeSet","samlNicknameAttributeSet","SamlNicknameAttributeSet","samlPositionAttributeSet","SamlPositionAttributeSet","ldapPositionAttributeSet","LdapPositionAttributeSet","logError","clearErrors","getMe","sendVerificationEmail","setDefaultProfileImage","uploadProfileImage","UserSettingsGeneralTab","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","email","resendStatus","showSpinner","handleEmailResend","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","emailError","password","emailUpdated","sectionIsSaving","verificationEnabled","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","submitActive","pictureFile","file","AcceptedProfileImageTypes","size","loadingPicture","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","updateFirstName","updateLastName","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","submitNickname","usernameSection","usernameLabel","updateUsername","submitUsername","positionSection","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","injectIntl","UserSettings","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","activity","NotificationLevels","MENTION","NONE","soundSection","soundRadio","sound","ALL","saving","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","onSubmit","onCancel","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","batchingOptions","batchingInfo","enableEmailBatching","INTERVAL_NEVER","getEmailInterval","getDerivedStateFromProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","onMessageChanged","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","pushActivityRadio","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","i","substring","commentsSection","commentsActive","autoResponderSection","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","UserUtils","roles","enableOAuthServiceProvider","EnableOAuthServiceProvider","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableLdap","EnableLdap","enableSaml","EnableSaml","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","canUseAccessTokens","passwordConfig","getPasswordConfig","getBool","updateUserPassword","getAuthorizedOAuthApps","deauthorizeOAuthApp","SecurityTab","license","getLicense","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","mfaEnforced","EnforceMultifactorAuthentication","mfaActive","mfaAvailable","mfa_active","MfaSection","SECTION_MFA","browserHistory","buttonText","removeMfa","setupMfa","renderTitle","renderDescription","renderContent","renderHelpText","userAccessTokens","entities","users","myUserAccessTokens","getUserAccessTokensForUser","createUserAccessToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","UserAccessTokenSection","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","handleCreateToken","confirmCreateToken","tokenId","revokeToken","tokenListClass","tokenList","values","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","noTokenText","isMobile","newTokenSection","saveTokenKeyPress","stopCreatingToken","startCreatingToken","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","authorizedApps","newPassword","confirmPassword","passwordError","valid","defaultState","getDefaultState","savingPassword","appId","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","encodeURIComponent","link","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","numMethods","signInSection","createSignInSection","oauthSection","createOAuthAppsSection","tokensSection","ariaLabel","closeUnusedDirectMessages","CATEGORY_SIDEBAR_SETTINGS","channelSwitcherOption","sidebarPreference","getSidebarPreferences","unreadsAtTop","unreads_at_top","favoriteAtTop","favorite_at_top","showChannelOrganization","ExperimentalChannelOrganization","showUnusedOption","CloseUnusedDirectMessages","UserSettingsSidebar","grouping","sorting","close_unused_direct_messages","channel_switcher_section","updatedSidebarSettings","trackSettingChangeIfNecessary","sectionName","contents","renderAutoCloseDMLabel","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection"],"mappings":"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","file":"9.1a300c907de91e32dde7.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, CMD + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send messages on CMD+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='padding-top'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, intlShape} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row margin-top x2'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='padding-top'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='margin-top x2'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='margin-top x3'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n\n    const user = getCurrentUser(state);\n\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = user.mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\nexport default class MfaSection extends React.PureComponent {\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n\n        // Whether or not the current user has MFA enabled\n        mfaActive: PropTypes.bool.isRequired,\n\n        // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n        mfaAvailable: PropTypes.bool.isRequired,\n\n        // Whether or not this server enforces that all users have MFA\n        mfaEnforced: PropTypes.bool.isRequired,\n\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deactivateMfa: PropTypes.func.isRequired,\n        }),\n    };\n\n    state = {\n        serverError: null,\n    };\n\n    setupMfa = (e) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    removeMfa = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on your account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from your account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to your account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='padding-top'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='margin-right'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization} = this.props;\n        const {formatMessage} = this.context.intl;\n\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}"],"sourceRoot":""}